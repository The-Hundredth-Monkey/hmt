function ConvertTo-HMTScript {
    param(
        [System.Collections.Specialized.OrderedDictionary] $cfg
    )

    $script = "# This script is automatically generated by HMT`n"
    $hmt_options = $hmt._
    $stages = keys $hmt '_'
    foreach( $stage in $stages) {
         $s = Convert-Stage2Script $stage $hmt.$stage
         $script += "`n" + $s
    }

    $script | Set-Content $PSScriptRoot\..\hmt-script.ps1
}

function Convert-Stage2Script {
    param(
        [string] $StageName,
        [System.Collections.Specialized.OrderedDictionary] $StageData
    )
    Write-Verbose "Converting stage $StageName to script"

    $options = $StageData.stage

    $stage = "stage '$StageName' {"
    $runners = keys $StageData 'stage'
    foreach ( $r in $runners ) {
        $rdef, $opts = Get-RunnerDefinition $r
        $params, $pre = Get-RunnerParams $StageData.$r $opts
        if ($pre) {$script += $pre }
        $script += "{0} {1}`n`n" -f $rdef, $params 
    }
    $script
}

function titlecase($a) {
    (Get-Culture).TextInfo.ToTitleCase($a)
}

function Get-RunnerParams($data, $opts) {
    $dict = $data -is [System.Collections.Specialized.OrderedDictionary]
    if ($opts.Contains('s')) {
        $data | % { $res='' } { $res += ' -' + (titlecase $_).Replace(' ','') }
    } else { 
        if ($dict) {
            $data.Keys | % { $res =''} { 
                $val = $data.$_
                if ($val -is [string]) { $val = Expand-PoshString $val }
                if ($val.GetType().BaseType -isnot [ System.ValueType ]) {
                    $p = "`$p_${_}"
                    $pre += "${p} = ConvertFrom-Yaml @""`n" 
                    $pre += ConvertTo-Yaml $val
                    $pre += """@`n"
                    $val = $p
                }

                $res += ' -{0} {1}' -f (titlecase $_), $val
            } 
        }
    }
    if ($opts.Contains('f')) { $res += ' -Force' }

    $res.Trim(), $pre
}

function Get-RunnerDefinition( $Name )
{
    # if ($Name.EndsWith(':')) { 
    #     $Name = $Name.Substring(0, $Name.Length-2)
    #     $explicit = $true
    # } 

    if (($Name -match '(?<=\|).+') -or ($Name -match '\$$')) {
        $o = $Matches[0].Trim()

        $Name = $Name -replace '\s*\|.+'
    } else { $o = '' }

    if ($o -eq '$') { $Name = 'iex'}
    $n = gcm $Name -ea 0
    if (!$n) { 
        $n = $Name.Replace(' ', '-')
        $n = gcm $n -ea 0
        if (!$n) { throw "Can't find command: $Name" }
    }
    if ($n.CommandType -eq 'Alias') { $n = $n.Definition }
    return $n,$o
}

function keys( $hash, $exclude ) { $hash.Keys | ? { $exclude -notcontains $_ } }